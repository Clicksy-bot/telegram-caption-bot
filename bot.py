from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
import os
import random
from PIL import Image, ImageDraw, ImageFont
import requests
from io import BytesIO

BOT_TOKEN = "7821396988:AAFl8ysdBft9ILdntusKaXwfqmWM9eqh7BY"  # ‚Üê –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
PIXABAY_API_KEY = "49851188-401fccb1ab9bd9b40659faf0a"

# üêæ –§—Ä–∞–∑—ã –¥–ª—è –º–µ–º–∞
phrases = [
    "–°–µ–≥–æ–¥–Ω—è —è –Ω–µ –ª–µ–Ω—é—Å—å. –Ø –∑–∞—Ä—è–∂–∞—é—Å—å —ç–Ω–µ—Ä–≥–∏–µ–π —á–µ—Ä–µ–∑ –ª–µ–∂–∞–Ω–∏–µ.",
    "–ò–Ω–æ–≥–¥–∞ –ª—É—á—à–∏–π –ø–ª–∞–Ω ‚Äî —ç—Ç–æ –æ–¥–µ—è–ª–æ –∏ —Ç–∏—à–∏–Ω–∞.",
    "–°–º—ã—Å–ª –∂–∏–∑–Ω–∏? –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ –º–µ–Ω—è –ø–æ–∑–∂–µ.",
    "–¢—ã —Å–ø—Ä–∞–≤–∏—à—å—Å—è! –ù—É‚Ä¶ –∏–ª–∏ —Ö–æ—Ç—è –±—ã –∫—Ä–∞—Å–∏–≤–æ –ø—Ä–æ–∏–≥—Ä–∞–µ—à—å.",
    "–ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å —Å–∏—Ç—É–∞—Ü–∏—é ‚Äî –∏–∑–º—è—É–∫–∞–π –µ—ë!",
    "–°—á–∞—Å—Ç—å–µ ‚Äî —ç—Ç–æ –∫–æ–≥–¥–∞ —É—Ç—Ä–æ, –∞ –≤—Å—Ç–∞–≤–∞—Ç—å –Ω–µ –Ω–∞–¥–æ.",
    "–†–∞–±–æ—Ç–∞–π –∫–∞–∫ –±—É–¥—Ç–æ –Ω–∏–∫—Ç–æ –Ω–µ —Å–º–æ—Ç—Ä–∏—Ç. –ü–æ—Ç–æ–º—É —á—Ç–æ –Ω–∏–∫–æ–º—É –Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ.",
    "–Ø –Ω–µ –ø—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∏—Ä—É—é. –Ø —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏ –æ—Ç–¥—ã—Ö–∞—é.",
    "–•–æ—Ä–æ—à–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ ‚Äî —ç—Ç–æ –∫–æ–≥–¥–∞ —Ç—ã –∫–æ—Ç.",
    "–ì–ª–∞–≤–Ω–æ–µ ‚Äî –Ω–µ —Å–¥–∞–≤–∞—Ç—å—Å—è! –ù–æ –∏ –Ω–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä—è–≥–∞—Ç—å—Å—è.",
    "–ú–∏—Ä –Ω–µ –∏–¥–µ–∞–ª–µ–Ω. –ó–∞—Ç–æ –µ—Å—Ç—å –ø–µ—á–µ–Ω—å–∫–∏."
]

# üî§ –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ —Å—Ç—Ä–æ–∫–∞–º
def wrap_text(text, font, max_width, draw):
    words = text.split()
    lines = []
    line = ""
    for word in words:
        test_line = line + word + " "
        bbox = draw.textbbox((0, 0), test_line, font=font)
        width = bbox[2] - bbox[0]
        if width <= max_width:
            line = test_line
        else:
            lines.append(line.strip())
            line = word + " "
    if line:
        lines.append(line.strip())
    return lines

# üî† –ü–æ–¥–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
def get_best_font_size(text, max_width, draw, font_path="Arial.ttf", max_font_size=60, min_font_size=20):
    for size in range(max_font_size, min_font_size - 1, -2):
        try:
            font = ImageFont.truetype(font_path, size=size)
        except:
            font = ImageFont.load_default()
        lines = wrap_text(text, font, max_width, draw)
        fits = True
        for line in lines:
            bbox = draw.textbbox((0, 0), line, font=font)
            width = bbox[2] - bbox[0]
            if width > max_width:
                fits = False
                break
        if fits:
            return font
    return font

# üê± –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ–º–∞ —Å –∫–æ—Ç–æ–º
def generate_cat_meme():
    cat_folder = "cats"
    images = [img for img in os.listdir(cat_folder) if img.endswith(('.jpg', '.jpeg', '.png'))]
    if not images:
        return None

    print(f"üì∏ –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(images)}")
    chosen = random.choice(images)
    print(f"üéØ –í—ã–±—Ä–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {chosen}")

    cat_img = Image.open(os.path.join(cat_folder, chosen)).convert("RGB")
    draw = ImageDraw.Draw(cat_img)
    text = random.choice(phrases)
    max_width = cat_img.width - 40

    font = get_best_font_size(text, max_width, draw)
    lines = wrap_text(text, font, max_width, draw)

    y = 20
    for line in lines:
        bbox = draw.textbbox((0, 0), line, font=font)
        text_width = bbox[2] - bbox[0]
        text_height = bbox[3] - bbox[1]
        x = (cat_img.width - text_width) // 2

        # –û–±–≤–æ–¥–∫–∞: —á—ë—Ä–Ω—ã–π –∫–æ–Ω—Ç—É—Ä
        outline_range = 2
        for dx in range(-outline_range, outline_range + 1):
            for dy in range(-outline_range, outline_range + 1):
                if dx != 0 or dy != 0:
                    draw.text((x + dx, y + dy), line, font=font, fill=(0, 0, 0))

        # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç: –±–µ–ª—ã–π
        draw.text((x, y), line, font=font, fill=(255, 255, 255))
        y += text_height + 5


    output_path = "cat_meme.jpg"
    cat_img.save(output_path)
    return output_path

def create_image_with_text_from_pixabay(text, api_key):
    url = "https://pixabay.com/api/"
    params = {
        "key": api_key,
        "q": text,
        "image_type": "photo",
        "safesearch": "true",
        "per_page": 10
    }
    response = requests.get(url, params=params)
    
    print("üîó –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞:", response.url)
    print("üì• –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:", response.status_code)
    print("üìÑ –û—Ç–≤–µ—Ç:", response.text[:500])  # –ø–æ–∫–∞–∂–µ–º –ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤

    try:
        data = response.json()
        hits = data.get("hits")
        if not hits:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
            return None
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ JSON:", str(e))
        return None

    chosen = random.choice(hits)
    img_url = chosen["largeImageURL"]
    img_response = requests.get(img_url)
    img = Image.open(BytesIO(img_response.content)).convert("RGB")

    draw = ImageDraw.Draw(img)
    font_path = "Arial.ttf"
    try:
        font = ImageFont.truetype(font_path, size=40)
    except:
        font = ImageFont.load_default()

    max_width = img.width - 40
    lines = wrap_text(text, font, max_width, draw)

    y = img.height - (len(lines) * 50) - 40
    for line in lines:
        bbox = draw.textbbox((0, 0), line, font=font)
        text_width = bbox[2] - bbox[0]
        x = (img.width - text_width) // 2
        # –û–±–≤–æ–¥–∫–∞
        outline_range = 2
        for ox in range(-outline_range, outline_range + 1):
            for oy in range(-outline_range, outline_range + 1):
                draw.text((x + ox, y + oy), line, font=font, fill="black")
        draw.text((x, y), line, font=font, fill="white")
        y += 50

    output_path = "captioned_image.jpg"
    img.save(output_path)
    return output_path


# ‚ñ∂Ô∏è –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        ["üêæ –°—Ç–æ—Ä–∏—Å —Å —Ç–µ–∫—Å—Ç–æ–º", "üé® –ö–∞—Ä—Ç–∏–Ω–∫–∞ —Å –ø–æ–¥–ø–∏—Å—å—é"],
        ["üòÇ –ú–µ–º", "üé≤ –†–∞–Ω–¥–æ–º-–≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø Clicksy üêæ\n–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–æ–∑–¥–∞—Ç—å:", reply_markup=reply_markup)

# üîò –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    # üëá –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –∂–¥–∞–ª –ª–∏ –±–æ—Ç –ø–æ–¥–ø–∏—Å—å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if context.user_data.get("awaiting_caption"):
        user_caption = text
        context.user_data["awaiting_caption"] = False
        await update.message.reply_text("–ò—â—É –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É...")

        image_path = create_image_with_text_from_pixabay(user_caption, PIXABAY_API_KEY)
        if image_path:
            await update.message.reply_photo(photo=open(image_path, "rb"))
        else:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É üòø")
        return  # ‚úÖ –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏, —á—Ç–æ–±—ã –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –¥–∞–ª—å—à–µ

    # üéõ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
    if text == "üêæ –°—Ç–æ—Ä–∏—Å —Å —Ç–µ–∫—Å—Ç–æ–º":
        await update.message.reply_text("–í–æ—Ç —Ç–≤–æ—è —Å—Ç–æ—Ä–∏—Å —Å —Ç–µ–∫—Å—Ç–æ–º! (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞)")

    elif text == "üé® –ö–∞—Ä—Ç–∏–Ω–∫–∞ —Å –ø–æ–¥–ø–∏—Å—å—é":
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ –ø–æ–¥–ø–∏—Å—å, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ:")
        context.user_data["awaiting_caption"] = True

    elif text == "üòÇ –ú–µ–º":
        meme_path = generate_cat_meme()
        if meme_path:
            await update.message.reply_photo(photo=open(meme_path, "rb"))
        else:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ—Ç–∏–∫–∞ üòø")

    elif text == "üé≤ –†–∞–Ω–¥–æ–º-–≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ":
        await update.message.reply_text("–û–∫–µ–π, –ª–æ–≤–∏–º –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ... (—Ç–æ–∂–µ –∑–∞–≥–ª—É—à–∫–∞)")

    else:
        await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ –∑–Ω–∞—é, —á—Ç–æ —Å —ç—Ç–∏–º –¥–µ–ª–∞—Ç—å. –í—ã–±–µ—Ä–∏ –∏–∑ –º–µ–Ω—é üòä")

# üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    app.run_polling()

